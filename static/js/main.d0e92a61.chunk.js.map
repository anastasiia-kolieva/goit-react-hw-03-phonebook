{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleChange","event","target","value","setState","handelSubmit","preventDefault","validateForm","props","onSubmitData","id","shortid","generate","resetForm","onCheckUnique","alert","this","className","s","form","onSubmit","label","type","placeholder","onChange","submit_button","Component","Filter","filter_title","filter_input","ContactList","contacts","onDeleteContact","map","contact","li","button","onClick","stylesForWrapper","width","margin","paddingTop","stylesForTitles","textAlign","color","App","filter","handelDeleteContact","contactId","prevState","contactFormSubmithandler","newContact","prevContact","handelCheckUniqueContact","isExistContact","find","changeFilter","getFilteredContacts","normalizedFilter","toLowerCase","includes","prevContacts","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","filteredContacts","style","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0e92a61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter_title\":\"Filter_filter_title__1E2UF\",\"filter_input\":\"Filter_filter_input__aIEKt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"ContactList_li__xvZLk\",\"button\":\"ContactList_button__GnP85\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2R76F\",\"label\":\"ContactForm_label__hdIQq\",\"submit_button\":\"ContactForm_submit_button__3bP4z\"};","import { Component } from 'react';\nimport s from '../ContactForm/ContactForm.module.css';\nimport shortid from 'shortid';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = event => {\n    //   обновить стейт по вычисляемому значению name у инпутов name=\"...\" ->(event.target.name)\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  handelSubmit = event => {\n    const { name, number } = this.state;\n    // чтоб не перезагружалась страница по умолчанию\n    event.preventDefault();\n\n    // валидация формы при сабмите\n    const isValidateForm = this.validateForm();\n    // если форма не валидна, выход\n    if (!isValidateForm) {\n      return;\n    }\n    // если форма валидна,\n    // прокидываем данные введённые с формы(name,number) выше в App\n    this.props.onSubmitData({ id: shortid.generate(), name, number });\n\n    this.resetForm();\n  };\n\n  // Валидация формы (проверка на то, заполнены ли поля формы)\n  validateForm = () => {\n    const { name, number } = this.state;\n    const { onCheckUnique } = this.props;\n\n    // если не имя или не номер телефона\n    if (!name || !number) {\n      alert('Some field is empty!');\n      // не прошла валидацию\n      return false;\n    }\n    return onCheckUnique(name);\n  };\n\n  // очистка формы\n  resetForm = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form className={s.form} onSubmit={this.handelSubmit}>\n        <label className={s.label}>\n          Name{' '}\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter name\"\n            value={name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label className={s.label}>\n          Number{' '}\n          <input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Enter phone number\"\n            value={number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={s.submit_button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import React from 'react';\nimport s from '../Filter/Filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <>\n      <h2 className={s.filter_title}>Find contacts by name</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter contact name\"\n        className={s.filter_input}\n        value={value}\n        onChange={onChange}\n      ></input>\n    </>\n  );\n};\n\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport s from '../ContactList/ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <li key={contact.id} className={s.li}>\n          {contact.name}: {contact.number}\n          <button\n            className={s.button}\n            onClick={() => onDeleteContact(contact.id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nconst stylesForWrapper = {\n  width: '500px',\n  margin: '0 auto',\n  paddingTop: '30px',\n};\n\nconst stylesForTitles = {\n  textAlign: 'center',\n  color: '#6B5EAC',\n};\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  // изменить стостояние от предыдущего\n  handelDeleteContact = contactId => {\n    this.setState(prevState => ({\n      // беру все предыдущие контакты.Для каждого из них проверяю\n      // по id(сравниваю с id контакта, который нужно удалить)\n      // отфильтровывыю только те, id которых не равен id, контакта который нужно удалить\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  // Получение данных state.name и state.number c ContactForm\n  // добавление нового контакта\n  contactFormSubmithandler = newContact => {\n    this.setState(prevContact => ({\n      contacts: [...prevContact.contacts, newContact],\n    }));\n  };\n\n  handelCheckUniqueContact = name => {\n    const { contacts } = this.state;\n    // по контанктам проходим и на каждой итераци сравниваем имена существующие\n    // в списке контактов с тем , которое приходит с формы\n    // двойное НЕ используют для преобразования значений к логическому типу\n    const isExistContact = !!contacts.find(contact => contact.name === name);\n\n    //  alert сработает, если в левой части (isExistContact) будет  равен true(если\n    // найдёться уже существующий контакт в списке)\n    isExistContact && alert('Contact is already exist!');\n\n    // функция возвращает ответ \"уникальный ли контакт или нет?\" Если пришло isExistContact=true(существует контакт),\n    // функция возвращает: \"контакт НЕ уникальный\"\n    return !isExistContact;\n  };\n\n  // Filter\n  changeFilter = event => {\n    this.setState({ filter: event.target.value });\n  };\n\n  getFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    // возвращаем те контакты, свойсто имени которых включает значение из this.state.filter\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  componentDidMount() {\n    // взять контакты с предыдущей сессии, хранящиеся в localStorage\n    const prevContacts = localStorage.getItem('contacts');\n    // запарсить массив\n    const parsedContacts = JSON.parse(prevContacts);\n\n    // если в localStorage уже есть контакты, тогда их записываем в state.\n    // если контакты=пустой массив(null), тогда ничего не записывается\n    if (parsedContacts) {\n      // записать в state предыдущие контакты\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // если текущий контакт в state НЕ равен предыдущему контакту в state\n    // проверяем обновился ли массив контактов\n    if (this.state.contacts !== prevState.contacts) {\n      // записываем в localStorage массив contacts обьектов ({id,name,number})\n      // при каждом обновлении контакта, перезаписываем массив контактов\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    const { filter } = this.state;\n    // переменная для отрисовки отфильтрованных контактов\n    const filteredContacts = this.getFilteredContacts();\n    return (\n      <div style={{ ...stylesForWrapper }}>\n        <h1 style={{ ...stylesForTitles }}>Phonebook</h1>\n\n        <ContactForm\n          onSubmitData={this.contactFormSubmithandler}\n          onCheckUnique={this.handelCheckUniqueContact}\n        />\n\n        <h2 style={{ ...stylesForTitles }}>Contacts</h2>\n\n        <Filter value={filter} onChange={this.changeFilter} />\n\n        <ContactList\n          contacts={filteredContacts}\n          onDeleteContact={this.handelDeleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}